{"ast":null,"code":"import _classCallCheck from \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ALJohnny/Desktop/Git/ReactCHLayout/src/app/auth/Auth.js\";\nimport React, { Component } from 'react';\nimport history from 'history.js';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\nimport firebaseService from 'app/services/firebaseService';\nimport auth0Service from 'app/services/auth0Service';\nimport jwtService from 'app/services/jwtService';\n\nvar Auth =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Auth, _Component);\n\n  /*eslint-disable-next-line no-useless-constructor*/\n  function Auth(props) {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Auth).call(this, props)); //  Comment the line if you do not use JWt\n    // this.jwtCheck();\n\n    /**\n     * Comment the line if you do not use Auth0\n     */\n    //this.auth0Check();\n\n    /**\n     * Comment the line if you do not use Firebase\n     */\n    //this.firebaseCheck();\n\n    _this.jwtCheck = function () {\n      var token = localStorage.getItem('token');\n      console.log(token);\n\n      if (token == null || token == '') {\n        history.push({\n          pathname: '/'\n        }); // this.props.setUserDataAuth0(token);\n        // this.props.showMessage({message: 'Logged in with Auth0'});\n      } // jwtService.on('onAutoLogin', () => {\n      //     this.props.showMessage({message: 'Logging in with JWT'});\n      //     /**\n      //      * Sign in and retrieve user data from Api\n      //      */\n      //     jwtService.signInWithToken()\n      //         .then(user => {\n      //             this.props.setUserData(user);\n      //             this.props.showMessage({message: 'Logged in with JWT'});\n      //         })\n      //         .catch(error => {\n      //             this.props.showMessage({message: error});\n      //         })\n      // });\n      // jwtService.on('onAutoLogout', (message) => {\n      //     if ( message )\n      //     {\n      //         this.props.showMessage({message});\n      //     }\n      //     this.props.logout();\n      // });\n      // jwtService.init();\n\n    };\n\n    _this.auth0Check = function () {\n      auth0Service.init();\n\n      if (auth0Service.isAuthenticated()) {\n        _this.props.showMessage({\n          message: 'Logging in with Auth0'\n        });\n        /**\n         * Retrieve user data from Auth0\n         */\n\n\n        auth0Service.getUserData().then(function (tokenData) {\n          _this.props.setUserDataAuth0(tokenData);\n\n          _this.props.showMessage({\n            message: 'Logged in with Auth0'\n          });\n        });\n      }\n    };\n\n    _this.firebaseCheck = function () {\n      firebaseService.init();\n      firebaseService.onAuthStateChanged(function (authUser) {\n        if (authUser) {\n          _this.props.showMessage({\n            message: 'Logging in with Firebase'\n          });\n          /**\n           * Retrieve user data from Firebase\n           */\n\n\n          firebaseService.getUserData(authUser.uid).then(function (user) {\n            _this.props.setUserDataFirebase(user, authUser);\n\n            _this.props.showMessage({\n              message: 'Logged in with Firebase'\n            });\n          });\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"render\",\n    value: function render() {\n      var children = this.props.children;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, children);\n    }\n  }]);\n\n  return Auth;\n}(Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: userActions.logoutUser,\n    setUserData: userActions.setUserData,\n    setUserDataAuth0: userActions.setUserDataAuth0,\n    setUserDataFirebase: userActions.setUserDataFirebase,\n    showMessage: Actions.showMessage,\n    hideMessage: Actions.hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/ALJohnny/Desktop/Git/ReactCHLayout/src/app/auth/Auth.js"],"names":["React","Component","history","connect","userActions","bindActionCreators","Actions","firebaseService","auth0Service","jwtService","Auth","props","jwtCheck","token","localStorage","getItem","console","log","push","pathname","auth0Check","init","isAuthenticated","showMessage","message","getUserData","then","tokenData","setUserDataAuth0","firebaseCheck","onAuthStateChanged","authUser","uid","user","setUserDataFirebase","children","mapDispatchToProps","dispatch","logout","logoutUser","setUserData","hideMessage"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport history from 'history.js';\n\nimport {connect} from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport {bindActionCreators} from 'redux';\nimport * as Actions from 'app/store/actions';\nimport firebaseService from 'app/services/firebaseService';\nimport auth0Service from 'app/services/auth0Service';\nimport jwtService from 'app/services/jwtService';\n\nclass Auth extends Component {\n    /*eslint-disable-next-line no-useless-constructor*/\n    constructor(props)\n    {\n        super(props);\n\n        \n        //  Comment the line if you do not use JWt\n         \n        // this.jwtCheck();\n\n        /**\n         * Comment the line if you do not use Auth0\n         */\n        //this.auth0Check();\n\n        /**\n         * Comment the line if you do not use Firebase\n         */\n        //this.firebaseCheck();\n    }\n\n    jwtCheck = () => {\n        \n        var token = localStorage.getItem('token');\n        console.log(token);\n\n        if(token == null || token == ''){\n            history.push({\n                pathname: '/'\n            });\n\n        // this.props.setUserDataAuth0(token);\n\n        // this.props.showMessage({message: 'Logged in with Auth0'});\n        }\n        // jwtService.on('onAutoLogin', () => {\n\n        //     this.props.showMessage({message: 'Logging in with JWT'});\n\n        //     /**\n        //      * Sign in and retrieve user data from Api\n        //      */\n        //     jwtService.signInWithToken()\n        //         .then(user => {\n        //             this.props.setUserData(user);\n\n        //             this.props.showMessage({message: 'Logged in with JWT'});\n        //         })\n        //         .catch(error => {\n        //             this.props.showMessage({message: error});\n        //         })\n        // });\n\n        // jwtService.on('onAutoLogout', (message) => {\n        //     if ( message )\n        //     {\n        //         this.props.showMessage({message});\n        //     }\n        //     this.props.logout();\n        // });\n\n        // jwtService.init();\n    };\n\n    auth0Check = () => {\n\n        auth0Service.init();\n\n        if ( auth0Service.isAuthenticated() )\n        {\n            this.props.showMessage({message: 'Logging in with Auth0'});\n\n            /**\n             * Retrieve user data from Auth0\n             */\n            auth0Service.getUserData().then(tokenData => {\n\n                this.props.setUserDataAuth0(tokenData);\n\n                this.props.showMessage({message: 'Logged in with Auth0'});\n            })\n        }\n    };\n\n    firebaseCheck = () => {\n\n        firebaseService.init();\n\n        firebaseService.onAuthStateChanged(authUser => {\n            if ( authUser )\n            {\n                this.props.showMessage({message: 'Logging in with Firebase'});\n\n                /**\n                 * Retrieve user data from Firebase\n                 */\n                firebaseService.getUserData(authUser.uid).then(user => {\n\n                    this.props.setUserDataFirebase(user, authUser);\n\n                    this.props.showMessage({message: 'Logged in with Firebase'});\n                })\n            }\n        });\n    };\n\n    render()\n    {\n        const {children} = this.props;\n\n\n        return (\n            <React.Fragment>\n                {children}\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapDispatchToProps(dispatch)\n{\n    return bindActionCreators({\n            logout             : userActions.logoutUser,\n            setUserData        : userActions.setUserData,\n            setUserDataAuth0   : userActions.setUserDataAuth0,\n            setUserDataFirebase: userActions.setUserDataFirebase,\n            showMessage        : Actions.showMessage,\n            hideMessage        : Actions.hideMessage\n        },\n        dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}