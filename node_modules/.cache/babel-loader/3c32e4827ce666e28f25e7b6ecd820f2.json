{"ast":null,"code":"import axios from 'axios';\nimport * as jwt_decode from \"jwt-decode\";\nimport history from 'history.js';\nexport var GET_EVENTS = '[CALENDAR APP] GET EVENTS';\nexport var OPEN_NEW_EVENT_DIALOG = '[CALENDAR APP] OPEN NEW EVENT DIALOG';\nexport var CLOSE_NEW_EVENT_DIALOG = '[CALENDAR APP] CLOSE NEW EVENT DIALOG';\nexport var OPEN_EDIT_EVENT_DIALOG = '[CALENDAR APP] OPEN EDIT EVENT DIALOG';\nexport var CLOSE_EDIT_EVENT_DIALOG = '[CALENDAR APP] CLOSE EDIT EVENT DIALOG';\nexport var ADD_EVENT = '[CALENDAR APP] ADD EVENT';\nexport var UPDATE_EVENT = '[CALENDAR APP] UPDATE EVENT';\nexport var REMOVE_EVENT = '[CALENDAR APP] REMOVE EVENT'; //----------get user data----------\n\nvar token = localStorage.getItem('token');\n\nif (token != null && token != \"\") {\n  var decoded = jwt_decode(token);\n} else {\n  history.push('/');\n} //----------Api config ---------\n\n\nvar api_host = \"http://localhost:8080\";\nvar headers = new Headers();\nheaders.append('Access-Control-Allow-Origin', 'http://localhost:8080');\nheaders.append('Access-Control-Allow-Credentials', 'true');\nheaders.append('Content-Type', 'application/json');\nheaders.append('authorization', 'Bearer ' + token);\nexport function getEvents() {\n  var events = [];\n  var request = fetch(api_host + '/event', {\n    method: 'GET',\n    headers: headers\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      response.json().then(function (data) {\n        console.log(data.data);\n\n        if (data.data.length > 0) {\n          data.data.forEach(function (event) {\n            events.push({\n              id: event.id,\n              title: event.title,\n              desc: event.description,\n              songs: event.name,\n              allDay: true,\n              start: new Date(event.start),\n              end: new Date(event.end)\n            });\n          });\n        }\n\n        console.log(events);\n        dispatch({\n          type: GET_EVENTS,\n          payload: events\n        });\n      });\n    });\n  };\n}\nexport function openNewEventDialog(data) {\n  return {\n    type: OPEN_NEW_EVENT_DIALOG,\n    data: data\n  };\n}\nexport function closeNewEventDialog() {\n  return {\n    type: CLOSE_NEW_EVENT_DIALOG\n  };\n}\nexport function openEditEventDialog(data) {\n  return {\n    type: OPEN_EDIT_EVENT_DIALOG,\n    data: data\n  };\n}\nexport function closeEditEventDialog() {\n  return {\n    type: CLOSE_EDIT_EVENT_DIALOG\n  };\n}\nexport function addEvent(newEvent) {\n  console.log(newEvent);\n  return function (dispatch, getState) {\n    // const request = axios.post('/api/calendar-app/add-event', {\n    //     newEvent\n    // });\n    var request = fetch(api_host + '/event', {\n      method: 'POST',\n      body: JSON.stringify({\n        title: newEvent.title,\n        description: newEvent.desc,\n        start: newEvent.start,\n        end: newEvent.end,\n        song_id: newEvent.song_id,\n        uid: decoded.user.id\n      }),\n      headers: headers\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: ADD_EVENT\n      })]).then(function () {\n        return dispatch(getEvents());\n      });\n    });\n  };\n}\nexport function updateEvent(event) {\n  return function (dispatch, getState) {\n    var request = axios.post('/api/calendar-app/update-event', {\n      event: event\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: UPDATE_EVENT\n      })]).then(function () {\n        return dispatch(getEvents());\n      });\n    });\n  };\n}\nexport function removeEvent(eventId) {\n  return function (dispatch, getState) {\n    var request = axios.post('/api/calendar-app/remove-event', {\n      eventId: eventId\n    });\n    return request.then(function (response) {\n      return Promise.all([dispatch({\n        type: REMOVE_EVENT\n      })]).then(function () {\n        return dispatch(getEvents());\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/Users/ALJohnny/Desktop/Git/ReactCHLayout/src/app/main/pages/calendar/store/actions/events.actions.js"],"names":["axios","jwt_decode","history","GET_EVENTS","OPEN_NEW_EVENT_DIALOG","CLOSE_NEW_EVENT_DIALOG","OPEN_EDIT_EVENT_DIALOG","CLOSE_EDIT_EVENT_DIALOG","ADD_EVENT","UPDATE_EVENT","REMOVE_EVENT","token","localStorage","getItem","decoded","push","api_host","headers","Headers","append","getEvents","events","request","fetch","method","dispatch","then","response","json","data","console","log","length","forEach","event","id","title","desc","description","songs","name","allDay","start","Date","end","type","payload","openNewEventDialog","closeNewEventDialog","openEditEventDialog","closeEditEventDialog","addEvent","newEvent","getState","body","JSON","stringify","song_id","uid","user","Promise","all","updateEvent","post","removeEvent","eventId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport * as jwt_decode from \"jwt-decode\";\nimport history from 'history.js';\n\n\nexport const GET_EVENTS = '[CALENDAR APP] GET EVENTS';\nexport const OPEN_NEW_EVENT_DIALOG = '[CALENDAR APP] OPEN NEW EVENT DIALOG';\nexport const CLOSE_NEW_EVENT_DIALOG = '[CALENDAR APP] CLOSE NEW EVENT DIALOG';\nexport const OPEN_EDIT_EVENT_DIALOG = '[CALENDAR APP] OPEN EDIT EVENT DIALOG';\nexport const CLOSE_EDIT_EVENT_DIALOG = '[CALENDAR APP] CLOSE EDIT EVENT DIALOG';\nexport const ADD_EVENT = '[CALENDAR APP] ADD EVENT';\nexport const UPDATE_EVENT = '[CALENDAR APP] UPDATE EVENT';\nexport const REMOVE_EVENT = '[CALENDAR APP] REMOVE EVENT';\n\n//----------get user data----------\nvar token = localStorage.getItem('token');\nif(token != null && token != \"\"){\n    var decoded = jwt_decode(token);\n}else{\nhistory.push('/');\n}\n\n//----------Api config ---------\nconst api_host = \"http://localhost:8080\";\n\nlet headers = new Headers();\n\nheaders.append('Access-Control-Allow-Origin', 'http://localhost:8080');\nheaders.append('Access-Control-Allow-Credentials', 'true');\nheaders.append('Content-Type', 'application/json');\nheaders.append('authorization', 'Bearer ' + token);\n\n\n\nexport function getEvents()\n{\n    const events = [];\n\n    const request = fetch(api_host + '/event' , {\n        method: 'GET',\n        headers: headers,\n    });\n\n\n    return (dispatch) =>\n        request.then(response => {\n            response.json().then(data => {\n                console.log(data.data);\n                \n                if(data.data.length > 0){\n                    data.data.forEach(event => {\n                        events.push({\n                            id    : event.id,\n                            title : event.title,\n                            desc  : event.description,\n                            songs : event.name,\n                            allDay: true,\n                            start : new Date(event.start),\n                            end   : new Date(event.end)\n                        });\n                    });\n                }\n                \n                console.log(events);\n                dispatch({\n                    type   : GET_EVENTS,\n                    payload: events\n                });\n            });\n        });\n}\n\n\nexport function openNewEventDialog(data)\n{\n    return {\n        type: OPEN_NEW_EVENT_DIALOG,\n        data\n    }\n}\n\nexport function closeNewEventDialog()\n{\n    return {\n        type: CLOSE_NEW_EVENT_DIALOG\n    }\n}\n\nexport function openEditEventDialog(data)\n{\n    return {\n        type: OPEN_EDIT_EVENT_DIALOG,\n        data\n    }\n}\n\nexport function closeEditEventDialog()\n{\n    return {\n        type: CLOSE_EDIT_EVENT_DIALOG\n    }\n}\n\n\nexport function addEvent(newEvent)\n{\n    console.log(newEvent);\n    return (dispatch, getState) => {\n        // const request = axios.post('/api/calendar-app/add-event', {\n        //     newEvent\n        // });\n\n        const request = fetch(api_host + '/event' , {\n            method: 'POST',\n            body: JSON.stringify({        \n              title: newEvent.title,\n              description: newEvent.desc,\n              start: newEvent.start,\n              end: newEvent.end,\n              song_id: newEvent.song_id,                    \n              uid: decoded.user.id,\n            }),\n            headers: headers\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: ADD_EVENT\n                })\n            ]).then(() => dispatch(getEvents()))\n        );\n    };\n}\n\nexport function updateEvent(event)\n{\n    return (dispatch, getState) => {\n\n        const request = axios.post('/api/calendar-app/update-event', {\n            event\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: UPDATE_EVENT\n                })\n            ]).then(() => dispatch(getEvents()))\n        );\n    };\n}\n\nexport function removeEvent(eventId)\n{\n    return (dispatch, getState) => {\n\n        const request = axios.post('/api/calendar-app/remove-event', {\n            eventId\n        });\n\n        return request.then((response) =>\n            Promise.all([\n                dispatch({\n                    type: REMOVE_EVENT\n                })\n            ]).then(() => dispatch(getEvents()))\n        );\n    };\n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}