"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopupState = usePopupState;
exports.bindTrigger = bindTrigger;
exports.bindToggle = bindToggle;
exports.bindPopover = bindPopover;
exports.bindPopper = bindPopper;
exports.bindMenu = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

if (!React.useState) {
  throw new Error("React.useState (added in 16.8.0) must be defined to use the hooks API");
}

var eventOrAnchorElWarned = false;

function usePopupState(_ref) {
  var popupId = _ref.popupId,
      variant = _ref.variant;

  var _React$useState = React.useState(null),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      anchorEl = _React$useState2[0],
      setAnchorEl = _React$useState2[1];

  var toggle = function toggle(eventOrAnchorEl) {
    if (anchorEl) close();else open(eventOrAnchorEl);
  };

  var open = function open(eventOrAnchorEl) {
    if (!eventOrAnchorElWarned && !eventOrAnchorEl) {
      eventOrAnchorElWarned = true;
      console.error('eventOrAnchorEl should be defined'); // eslint-disable-line no-console
    }

    setAnchorEl(eventOrAnchorEl && eventOrAnchorEl.currentTarget ? eventOrAnchorEl.currentTarget : eventOrAnchorEl);
  };

  var close = function close() {
    return setAnchorEl(null);
  };

  var setOpen = function setOpen(nextOpen, eventOrAnchorEl) {
    if (nextOpen) {
      if (!eventOrAnchorEl) {
        throw new Error('eventOrAnchorEl must be defined when opening');
      }

      open(eventOrAnchorEl);
    } else close();
  };

  return {
    anchorEl: anchorEl,
    setAnchorEl: setAnchorEl,
    popupId: popupId,
    variant: variant,
    isOpen: anchorEl != null,
    open: open,
    close: close,
    toggle: toggle,
    setOpen: setOpen
  };
}
/**
 * Creates props for a component that opens the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindTrigger(_ref2) {
  var _ref3;

  var isOpen = _ref2.isOpen,
      open = _ref2.open,
      popupId = _ref2.popupId,
      variant = _ref2.variant;
  return _ref3 = {}, (0, _defineProperty2.default)(_ref3, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref3, 'aria-haspopup', true), (0, _defineProperty2.default)(_ref3, "onClick", open), _ref3;
}
/**
 * Creates props for a component that toggles the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindToggle(_ref4) {
  var _ref5;

  var isOpen = _ref4.isOpen,
      toggle = _ref4.toggle,
      popupId = _ref4.popupId,
      variant = _ref4.variant;
  return _ref5 = {}, (0, _defineProperty2.default)(_ref5, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref5, 'aria-haspopup', true), (0, _defineProperty2.default)(_ref5, "onClick", toggle), _ref5;
}
/**
 * Creates props for a `Popover` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindPopover(_ref6) {
  var isOpen = _ref6.isOpen,
      anchorEl = _ref6.anchorEl,
      close = _ref6.close,
      popupId = _ref6.popupId;
  return {
    id: popupId,
    anchorEl: anchorEl,
    open: isOpen,
    onClose: close
  };
}
/**
 * Creates props for a `Menu` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


var bindMenu = bindPopover;
/**
 * Creates props for a `Popper` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */

exports.bindMenu = bindMenu;

function bindPopper(_ref7) {
  var isOpen = _ref7.isOpen,
      anchorEl = _ref7.anchorEl,
      popupId = _ref7.popupId;
  return {
    id: popupId,
    anchorEl: anchorEl,
    open: isOpen
  };
}