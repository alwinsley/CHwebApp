"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindTrigger = bindTrigger;
exports.bindToggle = bindToggle;
exports.bindHover = bindHover;
exports.bindPopover = bindPopover;
exports.bindPopper = bindPopper;
exports.default = exports.bindMenu = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

/**
 * Creates props for a component that opens the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */
function bindTrigger(_ref) {
  var _ref2;

  var isOpen = _ref.isOpen,
      open = _ref.open,
      popupId = _ref.popupId,
      variant = _ref.variant;
  return _ref2 = {}, (0, _defineProperty2.default)(_ref2, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref2, 'aria-haspopup', true), (0, _defineProperty2.default)(_ref2, "onClick", open), _ref2;
}
/**
 * Creates props for a component that toggles the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindToggle(_ref3) {
  var _ref4;

  var isOpen = _ref3.isOpen,
      toggle = _ref3.toggle,
      popupId = _ref3.popupId,
      variant = _ref3.variant;
  return _ref4 = {}, (0, _defineProperty2.default)(_ref4, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref4, 'aria-haspopup', true), (0, _defineProperty2.default)(_ref4, "onClick", toggle), _ref4;
}
/**
 * Creates props for a component that opens the popup while hovered.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindHover(_ref5) {
  var _ref6;

  var isOpen = _ref5.isOpen,
      open = _ref5.open,
      onMouseLeave = _ref5.onMouseLeave,
      popupId = _ref5.popupId,
      variant = _ref5.variant;
  return _ref6 = {}, (0, _defineProperty2.default)(_ref6, variant === 'popover' ? 'aria-owns' : 'aria-describedby', isOpen ? popupId : null), (0, _defineProperty2.default)(_ref6, 'aria-haspopup', true), (0, _defineProperty2.default)(_ref6, "onMouseEnter", open), (0, _defineProperty2.default)(_ref6, "onMouseLeave", onMouseLeave), _ref6;
}
/**
 * Creates props for a `Popover` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindPopover(_ref7) {
  var isOpen = _ref7.isOpen,
      anchorEl = _ref7.anchorEl,
      close = _ref7.close,
      onMouseLeave = _ref7.onMouseLeave,
      popupId = _ref7.popupId;
  return {
    id: popupId,
    anchorEl: anchorEl,
    open: isOpen,
    onClose: close,
    onMouseLeave: onMouseLeave
  };
}
/**
 * Creates props for a `Menu` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


var bindMenu = bindPopover;
/**
 * Creates props for a `Popper` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */

exports.bindMenu = bindMenu;

function bindPopper(_ref8) {
  var isOpen = _ref8.isOpen,
      anchorEl = _ref8.anchorEl,
      popupId = _ref8.popupId,
      onMouseLeave = _ref8.onMouseLeave;
  return {
    id: popupId,
    anchorEl: anchorEl,
    open: isOpen,
    onMouseLeave: onMouseLeave
  };
}

var eventOrAnchorElWarned = false;

var PopupState =
/*#__PURE__*/
function (_React$Component) {
  (0, _inherits2.default)(PopupState, _React$Component);

  function PopupState() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, PopupState);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PopupState)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
      anchorEl: null,
      hovered: false
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleToggle", function (eventOrAnchorEl) {
      if (_this.state.anchorEl) _this.handleClose();else _this.handleOpen(eventOrAnchorEl);
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleOpen", function (eventOrAnchorEl) {
      if (!eventOrAnchorElWarned && !eventOrAnchorEl) {
        eventOrAnchorElWarned = true;
        console.error('eventOrAnchorEl should be defined'); // eslint-disable-line no-console
      }

      _this.setState({
        anchorEl: eventOrAnchorEl && eventOrAnchorEl.currentTarget ? eventOrAnchorEl.currentTarget : eventOrAnchorEl,
        hovered: eventOrAnchorEl.type === 'mouseenter'
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleClose", function () {
      return _this.setState({
        anchorEl: null,
        hovered: false
      });
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleMouseLeave", function (event) {
      var popupId = _this.props.popupId;
      var _this$state = _this.state,
          hovered = _this$state.hovered,
          anchorEl = _this$state.anchorEl;
      var popup = popupId && typeof document !== 'undefined' ? document.getElementById(popupId) // eslint-disable-line no-undef
      : null;
      var relatedTarget = event.relatedTarget;

      if (relatedTarget && typeof document !== 'undefined' && relatedTarget.parentElement === document.body // eslint-disable-line no-undef
      ) {
          var _relatedTarget = relatedTarget,
              childNodes = _relatedTarget.childNodes;
          if (childNodes.length) relatedTarget = childNodes[childNodes.length - 1];
        }

      if (hovered && !isAncestor(popup, relatedTarget) && !isAncestor(anchorEl, relatedTarget)) {
        _this.handleClose();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "handleSetOpen", function (open, eventOrAnchorEl) {
      if (open) _this.handleOpen(eventOrAnchorEl);else _this.handleClose();
    });
    return _this;
  }

  (0, _createClass2.default)(PopupState, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          popupId = _this$props.popupId,
          variant = _this$props.variant;
      var anchorEl = this.state.anchorEl;
      var isOpen = Boolean(anchorEl);
      var result = children({
        open: this.handleOpen,
        close: this.handleClose,
        onMouseLeave: this.handleMouseLeave,
        toggle: this.handleToggle,
        setOpen: this.handleSetOpen,
        isOpen: isOpen,
        anchorEl: anchorEl,
        popupId: popupId,
        variant: variant
      });
      if (result == null) return null;
      return result;
    }
  }]);
  return PopupState;
}(React.Component);

exports.default = PopupState;
(0, _defineProperty2.default)(PopupState, "propTypes", {
  /**
   * The render function.
   *
   * @param {object} props the properties injected by `PopupState`:
   * <ul>
   *   <li>`open(eventOrAnchorEl)`: opens the popup</li>
   *   <li>`close()`: closes the popup</li>
   *   <li>`toggle(eventOrAnchorEl)`: opens the popup if it is closed, or
   *     closes the popup if it is open.
   *   </li>
   *   <li>`setOpen(open, [eventOrAnchorEl])`: sets whether the popup is open.
   *     `eventOrAnchorEl` is required if `open` is truthy.
   *   </li>
   *   <li>`isOpen`: `true`/`false` if the popup is open/closed</li>
   *   <li>`anchorEl`: the current anchor element (`null` the popup is closed)</li>
   *   <li>`popupId`: the `popupId` prop you passed</li>
   * </ul>
   *
   * @returns {React.Node} the content to display
   */
  children: _propTypes.default.func.isRequired,

  /**
   * The `id` property to use for the popup.  Will be passed to the render
   * function as `bindPopup.id`, and also used for the `aria-owns` property
   * passed to the trigger component via `bindTrigger`.
   */
  popupId: _propTypes.default.string,

  /**
   * Which type of popup you are controlling.  Use `'popover'` for `Popover`
   * and `Menu`; use `'popper'` for `Popper`s.  Right now this only affects
   * whether `aria-owns` or `aria-describedby` is used on the trigger
   * component.
   */
  variant: _propTypes.default.oneOf(['popover', 'popper']).isRequired
});

function isAncestor(parent, child) {
  if (!parent) return false;

  while (child) {
    if (child === parent) return true;
    child = child.parentElement;
  }

  return false;
}