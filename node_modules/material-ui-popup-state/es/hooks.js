"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopupState = usePopupState;
exports.bindTrigger = bindTrigger;
exports.bindToggle = bindToggle;
exports.bindPopover = bindPopover;
exports.bindPopper = bindPopper;
exports.bindMenu = void 0;

var React = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

if (!React.useState) {
  throw new Error(`React.useState (added in 16.8.0) must be defined to use the hooks API`);
}

let eventOrAnchorElWarned = false;

function usePopupState({
  popupId,
  variant
}) {
  const [anchorEl, setAnchorEl] = React.useState(null);

  const toggle = eventOrAnchorEl => {
    if (anchorEl) close();else open(eventOrAnchorEl);
  };

  const open = eventOrAnchorEl => {
    if (!eventOrAnchorElWarned && !eventOrAnchorEl) {
      eventOrAnchorElWarned = true;
      console.error('eventOrAnchorEl should be defined'); // eslint-disable-line no-console
    }

    setAnchorEl(eventOrAnchorEl && eventOrAnchorEl.currentTarget ? eventOrAnchorEl.currentTarget : eventOrAnchorEl);
  };

  const close = () => setAnchorEl(null);

  const setOpen = (nextOpen, eventOrAnchorEl) => {
    if (nextOpen) {
      if (!eventOrAnchorEl) {
        throw new Error('eventOrAnchorEl must be defined when opening');
      }

      open(eventOrAnchorEl);
    } else close();
  };

  return {
    anchorEl,
    setAnchorEl,
    popupId,
    variant,
    isOpen: anchorEl != null,
    open,
    close,
    toggle,
    setOpen
  };
}
/**
 * Creates props for a component that opens the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindTrigger({
  isOpen,
  open,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: open
  };
}
/**
 * Creates props for a component that toggles the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindToggle({
  isOpen,
  toggle,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: toggle
  };
}
/**
 * Creates props for a `Popover` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindPopover({
  isOpen,
  anchorEl,
  close,
  popupId
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen,
    onClose: close
  };
}
/**
 * Creates props for a `Menu` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


const bindMenu = bindPopover;
/**
 * Creates props for a `Popper` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */

exports.bindMenu = bindMenu;

function bindPopper({
  isOpen,
  anchorEl,
  popupId
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen
  };
}