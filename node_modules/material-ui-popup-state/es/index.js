"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindTrigger = bindTrigger;
exports.bindToggle = bindToggle;
exports.bindHover = bindHover;
exports.bindPopover = bindPopover;
exports.bindPopper = bindPopper;
exports.default = exports.bindMenu = void 0;

var React = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Creates props for a component that opens the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */
function bindTrigger({
  isOpen,
  open,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: open
  };
}
/**
 * Creates props for a component that toggles the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindToggle({
  isOpen,
  toggle,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: toggle
  };
}
/**
 * Creates props for a component that opens the popup while hovered.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindHover({
  isOpen,
  open,
  onMouseLeave,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onMouseEnter: open,
    onMouseLeave
  };
}
/**
 * Creates props for a `Popover` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindPopover({
  isOpen,
  anchorEl,
  close,
  onMouseLeave,
  popupId
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen,
    onClose: close,
    onMouseLeave
  };
}
/**
 * Creates props for a `Menu` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


const bindMenu = bindPopover;
/**
 * Creates props for a `Popper` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */

exports.bindMenu = bindMenu;

function bindPopper({
  isOpen,
  anchorEl,
  popupId,
  onMouseLeave
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen,
    onMouseLeave
  };
}

let eventOrAnchorElWarned = false;

class PopupState extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "state", {
      anchorEl: null,
      hovered: false
    });

    _defineProperty(this, "handleToggle", eventOrAnchorEl => {
      if (this.state.anchorEl) this.handleClose();else this.handleOpen(eventOrAnchorEl);
    });

    _defineProperty(this, "handleOpen", eventOrAnchorEl => {
      if (!eventOrAnchorElWarned && !eventOrAnchorEl) {
        eventOrAnchorElWarned = true;
        console.error('eventOrAnchorEl should be defined'); // eslint-disable-line no-console
      }

      this.setState({
        anchorEl: eventOrAnchorEl && eventOrAnchorEl.currentTarget ? eventOrAnchorEl.currentTarget : eventOrAnchorEl,
        hovered: eventOrAnchorEl.type === 'mouseenter'
      });
    });

    _defineProperty(this, "handleClose", () => this.setState({
      anchorEl: null,
      hovered: false
    }));

    _defineProperty(this, "handleMouseLeave", event => {
      const {
        popupId
      } = this.props;
      const {
        hovered,
        anchorEl
      } = this.state;
      const popup = popupId && typeof document !== 'undefined' ? document.getElementById(popupId) // eslint-disable-line no-undef
      : null;
      let relatedTarget = event.relatedTarget;

      if (relatedTarget && typeof document !== 'undefined' && relatedTarget.parentElement === document.body // eslint-disable-line no-undef
      ) {
          const {
            childNodes
          } = relatedTarget;
          if (childNodes.length) relatedTarget = childNodes[childNodes.length - 1];
        }

      if (hovered && !isAncestor(popup, relatedTarget) && !isAncestor(anchorEl, relatedTarget)) {
        this.handleClose();
      }
    });

    _defineProperty(this, "handleSetOpen", (open, eventOrAnchorEl) => {
      if (open) this.handleOpen(eventOrAnchorEl);else this.handleClose();
    });
  }

  render() {
    const {
      children,
      popupId,
      variant
    } = this.props;
    const {
      anchorEl
    } = this.state;
    const isOpen = Boolean(anchorEl);
    const result = children({
      open: this.handleOpen,
      close: this.handleClose,
      onMouseLeave: this.handleMouseLeave,
      toggle: this.handleToggle,
      setOpen: this.handleSetOpen,
      isOpen,
      anchorEl,
      popupId,
      variant
    });
    if (result == null) return null;
    return result;
  }

}

exports.default = PopupState;

_defineProperty(PopupState, "propTypes", {
  /**
   * The render function.
   *
   * @param {object} props the properties injected by `PopupState`:
   * <ul>
   *   <li>`open(eventOrAnchorEl)`: opens the popup</li>
   *   <li>`close()`: closes the popup</li>
   *   <li>`toggle(eventOrAnchorEl)`: opens the popup if it is closed, or
   *     closes the popup if it is open.
   *   </li>
   *   <li>`setOpen(open, [eventOrAnchorEl])`: sets whether the popup is open.
   *     `eventOrAnchorEl` is required if `open` is truthy.
   *   </li>
   *   <li>`isOpen`: `true`/`false` if the popup is open/closed</li>
   *   <li>`anchorEl`: the current anchor element (`null` the popup is closed)</li>
   *   <li>`popupId`: the `popupId` prop you passed</li>
   * </ul>
   *
   * @returns {React.Node} the content to display
   */
  children: _propTypes.default.func.isRequired,

  /**
   * The `id` property to use for the popup.  Will be passed to the render
   * function as `bindPopup.id`, and also used for the `aria-owns` property
   * passed to the trigger component via `bindTrigger`.
   */
  popupId: _propTypes.default.string,

  /**
   * Which type of popup you are controlling.  Use `'popover'` for `Popover`
   * and `Menu`; use `'popper'` for `Popper`s.  Right now this only affects
   * whether `aria-owns` or `aria-describedby` is used on the trigger
   * component.
   */
  variant: _propTypes.default.oneOf(['popover', 'popper']).isRequired
});

function isAncestor(parent, child) {
  if (!parent) return false;

  while (child) {
    if (child === parent) return true;
    child = child.parentElement;
  }

  return false;
}